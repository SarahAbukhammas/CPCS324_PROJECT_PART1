
package PhoneNetworkApp;
import GraphFrameWork.*;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;


public class PhNWDesignApp {

    public static void main(String[] args) throws FileNotFoundException, IOException {
        
        Scanner input= new Scanner(System.in);
        //Ask user which requirements they would like to execute 
        System.out.print("Enter your requirement's choice: 1,2: ");
        int choice=input.nextInt();
        //If the user wishes to execute requirement 1: 
        if(choice==1){
        //Requirement (1):
        //Create a graph object
        Graph g1 = new BluePrintsGraph();
        //Read the graph information from the graph file 
        g1.readGraphFromFile("Graph.txt");
        //Output of kruskal algorithm: 
        System.out.println("The phone network (minimum spanning tree) generated by Kruskal algorithm is as follows:");
        KruskalAlg k1 = new KruskalAlg(g1.EdgeadjList,g1.vertices);
        System.out.println();
        //Output of Prim algorithm:
        System.out.println("The phone network (minimum spanning tree) generated by min-heap based Prim algorithm is as follows:");
        MHPrimAlg p1= new MHPrimAlg(g1.EdgeadjList, g1.vertices);
        }//End of if clause
///////////////////////////////////////////////////////////////////////////////////////////////////////////
        //If the user wishes to execute requirement 2: 
        if(choice==2){
        //Requirement(2):
        //Print the choices to user so they can choose: 
        System.out.println("Enter your choice:");
        System.out.println("1: n= 1000 , m= 10000");
        System.out.println("2: n= 1000 , m= 15000");
        System.out.println("3: n= 1000 , m= 25000");
        System.out.println("4: n= 5000 , m= 15000");
        System.out.println("5: n= 5000 , m= 25000");
        System.out.println("6: n= 10000 , m= 15000");
        System.out.println("7: n= 10000 , m= 25000");
        //Get the choice from user for the number of vertices and edges of the graph
        choice=input.nextInt();
        //Ask user if they wish the graph to be directed or undirected:
        System.out.println("Is the graph directed?\n" +" enter 1(true) or 2(false)");
        //Get user choice:
        int isdigraph=input.nextInt();
        boolean digraph;
        //If 1 then graph is directed:
        if(isdigraph==1){
            digraph=true;
        }//End of if 
        //If 2 then graph is undirected:
        else{
            digraph=false;
        }//End of else
        //Declare variables:
         KruskalAlg k2;
         BluePrintsGraph g2;
         MHPrimAlg p2;
        //enter a switch to cover all of the choices available for the user to choose from: 
        switch(choice){
            //If user chose option 1 for the graph: 
            case 1:
                //Make the graph of the user choice:
                g2= new BluePrintsGraph(1000,10000, digraph); 
                g2.make_graph(g2);
                //Output of kruskal algorithm: 
                k2 = new KruskalAlg(g2.EdgeadjList, g2.vertices);
                System.out.println();
                //Output of Prim algorithm:
                p2=new MHPrimAlg(g2.EdgeadjList, g2.vertices);
                break;
            //If user chose option 2 for the graph:
            case 2:
                //Make the graph of the user choice:
                g2= new BluePrintsGraph(1000, 15000,digraph); 
                g2.make_graph(g2);
                //Output of kruskal algorithm: 
                k2 = new KruskalAlg(g2.EdgeadjList, g2.vertices);
                System.out.println();
                //Output of Prim algorithm:
                p2=new MHPrimAlg(g2.EdgeadjList, g2.vertices);
                break;
            //If user chose option 3 for the graph:
            case 3: 
                //Make the graph of the user choice:
                g2= new BluePrintsGraph(1000, 25000,digraph); 
                g2.make_graph(g2);
                //Output of kruskal algorithm: 
                k2 = new KruskalAlg(g2.EdgeadjList, g2.vertices);
                System.out.println();
                //Output of Prim algorithm:
                p2=new MHPrimAlg(g2.EdgeadjList, g2.vertices);
                break;
            //If user chose option 4 for the graph:
            case 4: 
                //Make the graph of the user choice:
                g2= new BluePrintsGraph(5000, 15000,digraph); 
                g2.make_graph(g2);
                //Output of kruskal algorithm: 
                k2= new KruskalAlg(g2.EdgeadjList, g2.vertices);
                System.out.println();
                //Output of Prim algorithm:
                p2=new MHPrimAlg(g2.EdgeadjList, g2.vertices);
                break;
            //If user chose option 5 for the graph:
            case 5: 
                //Make the graph of the user choice:
                g2= new BluePrintsGraph(5000, 25000,digraph);
                g2.make_graph(g2);
                //Output of kruskal algorithm: 
                k2= new KruskalAlg(g2.EdgeadjList, g2.vertices);
                System.out.println();
                //Output of Prim algorithm:
                p2=new MHPrimAlg(g2.EdgeadjList, g2.vertices);
                break;
            //If user chose option 6 for the graph:
            case 6: 
                //Make the graph of the user choice:
                g2= new BluePrintsGraph(10000, 15000,digraph); 
                g2.make_graph(g2);
                //Output of kruskal algorithm: 
                k2= new KruskalAlg(g2.EdgeadjList, g2.vertices);
                System.out.println();
                //Output of Prim algorithm:
                p2=new MHPrimAlg(g2.EdgeadjList, g2.vertices);
                break;
            //If user chose option 7 for the graph:
            case 7: 
                //Make the graph of the user choice:
                g2= new BluePrintsGraph(10000, 25000,digraph); 
                g2.make_graph(g2);
                //Output of kruskal algorithm: 
                k2= new KruskalAlg(g2.EdgeadjList, g2.vertices);
                System.out.println();
                //Output of Prim algorithm:
                p2=new MHPrimAlg(g2.EdgeadjList, g2.vertices);
                break;
            //If user chose enters any other number than 1 to 7:
            default:System.out.println("Error !! ");
            break;
            }//End of switch
        }//End of if clause
    } // End of Main Method
}// End of Class
    
    





